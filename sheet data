using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class Link
{
    public int LinkId { get; set; }
    public string Value { get; set; }
}

public class Program
{
    public static void Main()
    {
        // Sample data
        List<Link> linkedCell = new List<Link>
        {
            new Link { LinkId = 1, Value = "LinkedValue1" },
            new Link { LinkId = 2, Value = "LinkedValue2" }
            // Add more items as needed
        };

        List<Link> webList = new List<Link>
        {
            new Link { LinkId = 1, Value = "WebValue1" },
            new Link { LinkId = 2, Value = "WebValue2" },
            // Add more items to simulate 5000 items
        };

        UpdateWebListValues(linkedCell, webList);

        // Print updated WebList
        foreach (var link in webList)
        {
            Console.WriteLine($"LinkId: {link.LinkId}, Value: {link.Value}");
        }
    }

    public static void UpdateWebListValues(List<Link> linkedCell, List<Link> webList)
    {
        int numberOfThreads = Environment.ProcessorCount; // Adjust this based on the number of available CPU cores
        int chunkSize = webList.Count / numberOfThreads;

        var tasks = new List<Task>();

        for (int i = 0; i < numberOfThreads; i++)
        {
            int start = i * chunkSize;
            int end = (i == numberOfThreads - 1) ? webList.Count : start + chunkSize;

            tasks.Add(Task.Run(() => UpdateChunk(linkedCell, webList, start, end)));
        }

        Task.WaitAll(tasks.ToArray());
    }

    private static void UpdateChunk(List<Link> linkedCell, List<Link> webList, int start, int end)
    {
        for (int i = start; i < end; i++)
        {
            var webLink = webList[i];
            var match = linkedCell.FirstOrDefault(link => link.LinkId == webLink.LinkId);
            if (match != null)
            {
                webLink.Value = match.Value;
            }
        }
    }
}